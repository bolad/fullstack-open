{"version":3,"sources":["components/FilterBox.js","components/PersonForm.js","components/Person.js","components/Notification.js","services/contacts.js","App.js","index.js"],"names":["FilterBox","handleChange","className","type","onChange","PersonForm","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","Person","person","removePerson","name","number","onClick","Notification","message","hasError","notificationClass","baseUrl","axios","get","then","response","data","newContact","post","id","put","delete","App","useState","persons","setPersons","setNewName","setNewNumber","filteredPerson","setFilteredPerson","notification","setNotification","errorMessage","setErrorMessage","useEffect","contactService","initialContacts","contact","window","confirm","filter","catch","handleNotifications","setTimeout","filteredPersons","toLowerCase","includes","event","target","preventDefault","personObj","map","contactToUpdate","find","returnedPerson","error","concat","console","log","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6bb064f8.chunk.js","sourcesContent":["import React from 'react';\n\nexport const FilterBox = ({ handleChange }) => (\n    <div className=\"filter\">\n        <label> Filter shown with:</label>\n        <input \n            type=\"search\"\n            onChange={handleChange}\n        />\n    </div>\n)\n  ","import React from 'react';\n\nconst PersonForm = ({\n    addPerson,\n    newName,\n    newNumber,\n    handleNameChange, \n    handleNumberChange\n}) => (\n    <form onSubmit={addPerson}>\n    <div>\n      Name: \n      <input \n          value={newName}\n          onChange={handleNameChange}\n      />\n    </div>\n    <div>\n      Number: \n      <input \n          value={newNumber}\n          onChange={handleNumberChange}\n      />\n    </div>\n    <div>\n      <button type=\"submit\">Add</button>\n    </div>\n  </form>\n)\n\nexport default PersonForm;\n\n","import React from 'react';\n\nconst Person = ({person, removePerson}) => (\n    <div className=\"contact\">\n        {person.name} {person.number} {' '}\n        <button onClick={() => removePerson(person)}>Delete</button>\n    </div>\n)\n\nexport default Person;","import React from 'react';\n\nconst Notification = ({ message, hasError = false }) => {\n    const notificationClass = hasError ? 'error' : 'notification'\n  \n    return (\n      <div className={notificationClass}>\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification;","import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newContact => {\n    const request = axios.post(baseUrl, newContact)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newContact) => {\n    const request = axios.put(`${baseUrl}/${id}`, newContact)\n    return request.then(response => response.data)\n}\n  \nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n  \nexport default { getAll, create, update, remove }\n","import React, { useState, useEffect } from 'react';\nimport { FilterBox } from './components/FilterBox';\nimport PersonForm from './components/PersonForm';\nimport Person from './components/Person';\nimport Notification from './components/Notification';\n\nimport contactService from './services/contacts';\n\nimport './index.css';\n\nconst App = () => {\n    const [ persons, setPersons ] = useState([]) \n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [filteredPerson, setFilteredPerson] = useState('')\n    const [notification, setNotification] = useState('')\n    const [errorMessage, setErrorMessage] = useState('')\n\n    useEffect(() => {\n      contactService\n        .getAll()\n        .then(initialContacts => {\n          // console.log(initialContacts)\n          setPersons(initialContacts)\n        })\n    }, [])\n\n    const addPerson = event => {\n      event.preventDefault()\n\n      const personObj = {\n        name: newName,\n        number: newNumber,\n      }\n\n      const exitingContacts = persons.map(person => person.name)\n\n      if (exitingContacts.includes(newName)) {\n        const contactToUpdate = persons.find(person => person.name === newName)\n\n        if (window.confirm(`${newName} already exists in phonebook. Do you want to update the phonenumber?`)) {\n          contactService\n            .update(contactToUpdate.id, personObj)\n            .then(returnedPerson => {\n              setPersons(persons.map(person => person.name !== newName ? person : returnedPerson))\n              setNewName('')\n              setNewNumber('')\n              setNotification('Phone number updated successfully')\n            }).catch(error => {\n              setErrorMessage(`Information of '${newName}' has already been removed from server`)\n            })\n            handleNotifications();\n        }\n      } else {\n        contactService\n        .create(personObj)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotification('Contact successfully added to phonebook')\n        })\n        .catch(error => {\n          console.log(error.response.data);\n          setErrorMessage(error.response.message)\n        })\n        handleNotifications();\n      }\n    }\n\n    const removePerson = contact => {\n      if (window.confirm(\"Are you sure you want to delete this contact?\")) {\n        contactService\n          .remove(contact.id)\n          .then(() => {\n            setPersons(persons.filter(person => person.id !== contact.id))\n            setNotification(`'${contact.name}' has been deleted from the phone book`)\n          })\n          .catch(() => {\n            setErrorMessage(`Information of '${contact.name}' has already been removed from server`) \n          })\n          handleNotifications();\n      }\n    }\n\n    const handleNameChange = event => {       \n        setNewName(event.target.value)  \n    }\n\n    const handleNumberChange = event => {       \n        setNewNumber(event.target.value)  \n    }\n\n    const handleFilteredPerson = event => {\n        setFilteredPerson(event.target.value)\n    }\n\n    const handleNotifications = () => {\n      setTimeout(() => {\n        setNotification('')\n        setErrorMessage('')\n      }, 5000)\n    }\n\n    const filteredPersons = persons.filter(person => \n        person.name.toLowerCase().includes(filteredPerson.toLowerCase())\n    )\n\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        {\n          notification ? (\n            <Notification message={notification} /> \n          ) : null \n        }\n        {\n          errorMessage ? (\n            <Notification message={errorMessage} hasError={true} />\n          ) : null\n        }\n\n        <FilterBox handleChange={handleFilteredPerson} />\n        <PersonForm \n            newName={newName}\n            newNumber={newNumber}\n            addPerson={addPerson}\n            handleNameChange={handleNameChange}\n            handleNumberChange={handleNumberChange}\n        />\n        <h2>Numbers</h2>\n        {filteredPersons.map(person => \n          <li key={person.id}>\n            <Person \n              person={person}\n              removePerson={removePerson}\n            />\n          </li>   \n        )}\n      </div>\n    )\n  }\n  \n  export default App","import React from 'react'\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <App />, \n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}